{"version":3,"sources":["PostLoader.js","PostList.js","Gallery.js","App.js","serviceWorker.js","index.js"],"names":["PostLoader","state","loading","markdown","_this2","this","match","props","setState","fetch","concat","params","id","then","response","text","marked","highlight","code","require","highlightAuto","value","catch","_","_this$state","classes","react_default","a","createElement","index_es","container","item","xs","sm","md","lg","xl","className","paper","dangerouslySetInnerHTML","__html","Component","withStyles","theme","margin","spacing","unit","padding","withRouter","PostList","posts","json","metadata","map","post","Link","key","path","to","link","primary","title","secondary","textDecoration","Gallery","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","randomNumber","limit","Math","floor","random","generateClassName","handleOnClick","event","image","_event$currentTarget","currentTarget","naturalWidth","naturalHeight","overlayImageStyle","assign","maxWidth","maxHeight","overflow","window","innerHeight","overlay","currentImage","handleClose","images","config","photos","res","photo","src","_this3","react","gallery","alt","img","onClick","style","display","gridTemplateColumns","gridAutoRows","gridAutoFlow","gridTemplateRows","v1","gridRow","v2","v3","v4","h1","gridColumn","h2","h3","h4","width","height","objectFit","cursor","position","background","top","right","bottom","left","zIndex","justifyItems","alignItems","createMuiTheme","palette","main","App","styles","HashRouter","AppBar_default","Toolbar_default","Typography_default","variant","color","flexGrow","component","Route","exact","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6eac8489.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport marked from \"marked\";\r\nimport { LinearProgress, Paper, withStyles, Grid } from \"@material-ui/core\";\r\nimport \"highlight.js/styles/github.css\";\r\n\r\nconst styles = theme => ({\r\n  paper: {\r\n    margin: theme.spacing.unit * 2,\r\n    padding: theme.spacing.unit * 2\r\n  }\r\n});\r\n\r\nclass PostLoader extends Component {\r\n  state = {\r\n    loading: false,\r\n    markdown: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { match } = this.props;\r\n\r\n    this.setState({ loading: true }, () => {\r\n      fetch(`./posts/${match.params.id}.md`)\r\n        .then(response => {\r\n          return response.text();\r\n        })\r\n        .then(text => {\r\n          this.setState({\r\n            markdown: marked(text, {\r\n              highlight: function(code) {\r\n                return require(\"highlight.js\").highlightAuto(code).value;\r\n              }\r\n            }),\r\n            loading: false\r\n          });\r\n        })\r\n        .catch(_ => {\r\n          this.setState({ loading: false });\r\n        });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { markdown, loading } = this.state;\r\n    const { classes } = this.props;\r\n\r\n    // The name of the dangerouslySetInnerHTML can be a little repellent\r\n    // but it is only to remind yourself that this expose users to XSS.\r\n    // This website can't take users input, so you do not have to be afraid\r\n    // of this line ðŸ˜ƒ\r\n\r\n    if (loading) {\r\n      return <LinearProgress />;\r\n    } else {\r\n      return (\r\n        <Grid container>\r\n          <Grid item xs={false} sm={1} md={2} lg={3} xl={4} />\r\n          <Grid item xs={12} sm={10} md={8} lg={6} xl={4}>\r\n            <Paper className={classes.paper}>\r\n              <article dangerouslySetInnerHTML={{ __html: markdown }} />\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(withRouter(PostLoader));\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  withStyles,\r\n  LinearProgress\r\n} from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst styles = {\r\n  link: {\r\n    textDecoration: \"none\"\r\n  }\r\n};\r\n\r\nclass PostList extends Component {\r\n  state = {\r\n    loading: false,\r\n    posts: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ loading: true }, () => {\r\n      fetch(`./metadata.json`)\r\n        .then(response => response.json())\r\n        .then(metadata => {\r\n          this.setState({ loading: false, posts: metadata.posts });\r\n        })\r\n        .catch(_ => {\r\n          this.setState({ loading: false });\r\n        });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { loading, posts } = this.state;\r\n\r\n    return loading ? (\r\n      <LinearProgress />\r\n    ) : (\r\n      <List>\r\n        {posts.map(post => (\r\n          <Link\r\n            key={post.path}\r\n            to={`/post/${post.path}`}\r\n            className={classes.link}\r\n          >\r\n            <ListItem>\r\n              <ListItemText primary={post.title} secondary={post.path} />\r\n            </ListItem>\r\n          </Link>\r\n        ))}\r\n      </List>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(PostList);\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { withStyles } from \"@material-ui/core\";\r\nimport config from \"./config.json\";\r\n\r\nconst styles = {\r\n  gallery: {\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(auto-fill, 100px)\",\r\n    gridAutoRows: \"100px\",\r\n    gridAutoFlow: \"dense\"\r\n  },\r\n  item: {\r\n    overflow: \"hidden\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: 1,\r\n    gridTemplateRows: 1\r\n  },\r\n  v1: { gridRow: \"span 1\" },\r\n  v2: { gridRow: \"span 2\" },\r\n  v3: { gridRow: \"span 3\" },\r\n  v4: { gridRow: \"span 4\" },\r\n  h1: { gridColumn: \"span 1\" },\r\n  h2: { gridColumn: \"span 2\" },\r\n  h3: { gridColumn: \"span 3\" },\r\n  h4: { gridColumn: \"span 4\" },\r\n  img: {\r\n    gridColumn: \"1 / -1\",\r\n    gridRow: \"1 / -1\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    objectFit: \"cover\",\r\n    cursor: \"zoom-in\"\r\n  },\r\n  overlay: {\r\n    position: \"fixed\",\r\n    background: \"rgba(0, 0, 0, 0.7)\",\r\n    top: \"0\",\r\n    right: \"0\",\r\n    bottom: \"0\",\r\n    left: \"0\",\r\n    zIndex: \"2\",\r\n    display: \"flex\",\r\n    justifyItems: \"center\",\r\n    alignItems: \"center\",\r\n    cursor: \"zoom-out\"\r\n  }\r\n};\r\n\r\n// Mainly designed using inspiration from Wes Bos grid course.\r\n// https://www.youtube.com/watch?v=OkCnhz__aFM\r\nclass Gallery extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      overlay: false,\r\n      currentImage: {},\r\n      overlayImageStyle: {},\r\n      images: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(`${config.photos}/metadata.json`)\r\n      .then(res => res.json())\r\n      .then(metadata =>\r\n        metadata.photos.map(photo => {\r\n          photo.src = `${config.photos}/${photo.src}`;\r\n          photo.className = this.generateClassName();\r\n\r\n          return photo;\r\n        })\r\n      )\r\n      .then(images => {\r\n        this.setState({ images });\r\n      });\r\n  }\r\n\r\n  randomNumber = limit => {\r\n    return Math.floor(Math.random() * limit) + 1;\r\n  };\r\n\r\n  generateClassName = () => {\r\n    const { classes } = this.props;\r\n\r\n    return `${classes.item} ${classes[\"h\" + this.randomNumber(4)]} ${\r\n      classes[\"v\" + this.randomNumber(4)]\r\n    }`;\r\n  };\r\n\r\n  handleOnClick = (event, image) => {\r\n    const { naturalWidth, naturalHeight } = event.currentTarget;\r\n\r\n    const overlayImageStyle = Object.assign(\r\n      { margin: \"auto\" },\r\n      naturalWidth > naturalHeight\r\n        ? {\r\n            maxWidth: \"100%\",\r\n            maxHeight: \"auto\",\r\n            overflow: \"hidden\"\r\n          }\r\n        : { maxHeight: window.innerHeight }\r\n    );\r\n\r\n    this.setState({ overlay: true, currentImage: image, overlayImageStyle });\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({ overlay: false, currentImage: {} });\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const { overlay, currentImage, overlayImageStyle, images } = this.state;\r\n\r\n    return (\r\n      <Fragment>\r\n        <div className={classes.gallery}>\r\n          {images.map(image => {\r\n            return (\r\n              <div className={image.className} key={image.src}>\r\n                <img\r\n                  src={image.src}\r\n                  alt={image.alt}\r\n                  className={classes.img}\r\n                  onClick={event => this.handleOnClick(event, image)}\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        {overlay && (\r\n          <div className={classes.overlay} onClick={this.handleClose}>\r\n            <img\r\n              src={currentImage.src}\r\n              alt={currentImage.alt}\r\n              style={overlayImageStyle}\r\n            />\r\n          </div>\r\n        )}\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(Gallery);\r\n","import React, { Component } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport PostLoader from \"./PostLoader\";\nimport { Button, MuiThemeProvider, createMuiTheme } from \"@material-ui/core\";\nimport PostList from \"./PostList\";\nimport Gallery from \"./Gallery\";\nimport \"./App.css\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: \"#081D22\" },\n    secondary: { main: \"#F1322A\" }\n  }\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider theme={theme}>\n        <Router>\n          <div>\n            <AppBar position=\"sticky\">\n              <Toolbar>\n                <Typography\n                  variant=\"h6\"\n                  color=\"inherit\"\n                  style={{\n                    flexGrow: 1\n                  }}\n                >\n                  YoannFleuryDev\n                </Typography>\n                <Button component={Link} to=\"/\" color=\"inherit\">\n                  Accueil\n                </Button>\n                <Button component={Link} to=\"/photos\" color=\"inherit\">\n                  Photos\n                </Button>\n              </Toolbar>\n            </AppBar>\n            <Route path=\"/\" component={PostList} exact />\n            <Route path=\"/post/:id\" component={PostLoader} />\n            <Route path=\"/photos\" component={Gallery} />\n          </div>\n        </Router>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"typeface-roboto\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}