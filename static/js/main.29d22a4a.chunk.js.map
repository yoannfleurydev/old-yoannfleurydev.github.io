{"version":3,"sources":["PostLoader.js","PostList.js","Gallery.js","App.js","serviceWorker.js","index.js"],"names":["PostLoader","state","loading","markdown","_this2","this","match","props","setState","fetch","concat","params","id","then","response","text","marked","catch","_","_this$state","react_default","a","createElement","index_es","dangerouslySetInnerHTML","__html","Component","withRouter","PostList","posts","metadata","map","post","Link","key","path","to","primary","title","secondary","images","src","alt","className","style","width","Gallery","container","spacing","image","item","xs","lg","lib_default","App","HashRouter","AppBar_default","position","Toolbar_default","Typography_default","variant","color","flexGrow","component","Route","exact","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29d22a4a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport marked from \"marked\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\n\r\nclass PostLoader extends Component {\r\n  state = {\r\n    loading: false,\r\n    markdown: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { match } = this.props;\r\n\r\n    this.setState({ loading: true }, () => {\r\n      fetch(\r\n        `https://raw.githubusercontent.com/yoannfleurydev/yoannfleurydev.github.io/develop/public/posts/${\r\n          match.params.id\r\n        }.md`\r\n      )\r\n        .then(response => {\r\n          return response.text();\r\n        })\r\n        .then(text => {\r\n          this.setState({\r\n            markdown: marked(text),\r\n            loading: false\r\n          });\r\n        })\r\n        .catch(_ => {\r\n          this.setState({ loading: false });\r\n        });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { markdown, loading } = this.state;\r\n\r\n    // The name of the dangerouslySetInnerHTML can be a little repellent\r\n    // but it is only to remind yourself that this expose users to XSS.\r\n    // This website can't take users input, so you do not have to be afraid\r\n    // of this line ðŸ˜ƒ\r\n\r\n    if (loading) {\r\n      return <CircularProgress />;\r\n    } else {\r\n      return <article dangerouslySetInnerHTML={{ __html: markdown }} />;\r\n    }\r\n  }\r\n}\r\n\r\nexport default withRouter(PostLoader);\r\n","import React, { Component } from \"react\";\r\nimport { List, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport metadata from \"./metadata.json\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass PostList extends Component {\r\n  render() {\r\n    const { posts } = metadata;\r\n    return (\r\n      <List>\r\n        {posts.map(post => (\r\n          <Link key={post.path} to={`/post/${post.path}`}>\r\n            <ListItem>\r\n              <ListItemText primary={post.title} secondary={post.path} />\r\n            </ListItem>\r\n          </Link>\r\n        ))}\r\n      </List>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostList;\r\n","import React, { Component } from \"react\";\r\nimport ImageZoom from \"react-medium-image-zoom\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nconst images = [\r\n  {\r\n    src: \"./img/amiens_20181123_193548.jpg\",\r\n    alt: \"Grande Roue du MarchÃ© de NoÃ«l d'Amiens\",\r\n    className: \"img\",\r\n    style: { width: \"20em\" }\r\n  },\r\n  {\r\n    src: \"./img/amiens_20181201_201109.jpg\",\r\n    alt: \"Rue d'Amiens vers le quartier de Saint Leu\",\r\n    className: \"img\",\r\n    style: { width: \"20em\" }\r\n  },\r\n  {\r\n    src: \"./img/amiens_20181229_195026.jpg\",\r\n    alt: \"BiÃ¨re Tempest Mexikake Brune\",\r\n    className: \"img\",\r\n    style: { width: \"20em\" }\r\n  },\r\n  {\r\n    src: \"./img/rouen_20181122_140027.jpg\",\r\n    alt: \"AmphithÃ©Ã¢tre principal de Codeurs en Seine 2018\",\r\n    className: \"img\",\r\n    style: { width: \"20em\" }\r\n  }\r\n];\r\n\r\nclass Gallery extends Component {\r\n  render() {\r\n    return (\r\n      <Grid container spacing={16}>\r\n        {images.map(image => (\r\n          <Grid item xs={12} lg={2} key={image.src}>\r\n            <ImageZoom image={image} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Gallery;\r\n","import React, { Component } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport PostLoader from \"./PostLoader\";\nimport { Button } from \"@material-ui/core\";\nimport PostList from \"./PostList\";\nimport Gallery from \"./Gallery\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Typography\n                variant=\"h6\"\n                color=\"inherit\"\n                style={{\n                  flexGrow: 1\n                }}\n              >\n                YoannFleuryDev\n              </Typography>\n              <Button component={Link} to=\"/\" color=\"inherit\">\n                Accueil\n              </Button>\n              <Button component={Link} to=\"/photos\" color=\"inherit\">\n                Photos\n              </Button>\n            </Toolbar>\n          </AppBar>\n          <Route path=\"/\" component={PostList} exact />\n          <Route path=\"/post/:id\" component={PostLoader} />\n          <Route path=\"/photos\" component={Gallery} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}